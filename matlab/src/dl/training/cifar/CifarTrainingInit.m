function net = CifarTrainingInit(opts)

lr = [0.1, 2];

% defining network
net.layers = {};

% block 1
nKernelsLayer1 = 32; % 32
net.layers{end + 1} = struct('type', 'conv', ...
  'weights', {{0.01 * randn(5, 5, opts.InputSize(3), nKernelsLayer1, 'single'), zeros(1, nKernelsLayer1, 'single')}}, ...
  'learningRate', 0.1 .* lr, ...
  'stride', 1, ...
  'pad', 2);
net.layers{end + 1} = struct('type', 'pool', ...
  'method', 'max', ...
  'pool', [3, 3], ...
  'stride', 2, ...
  'pad', [0, 1, 0, 1]);
net.layers{end + 1} = struct('type', 'relu');

% block 2
nKernelsLayer2 = 32; % 32
net.layers{end + 1} = struct('type', 'conv', ...
  'weights', {{0.05 * randn(5, 5, nKernelsLayer1, nKernelsLayer2, 'single'), zeros(1, nKernelsLayer2, 'single')}}, ...
  'learningRate', lr, ...
  'stride', 1, ...
  'pad', 2);
net.layers{end + 1} = struct('type', 'relu');
net.layers{end + 1} = struct('type', 'pool', ...
  'method', 'avg', ...
  'pool', [3, 3], ...
  'stride', 2, ...
  'pad', [0, 1, 0, 1]); % emulate caffe

% block 3
nKernelsLayer3 = 64; % 64
net.layers{end + 1} = struct('type', 'conv', ...
  'weights', {{0.05 * randn(5, 5, nKernelsLayer2, nKernelsLayer3, 'single'), zeros(1, nKernelsLayer3, 'single')}}, ...
  'learningRate', lr, ...
  'stride', 1, ...
  'pad', 2);
net.layers{end + 1} = struct('type', 'relu');
net.layers{end + 1} = struct('type', 'pool', ...
  'method', 'avg', ...
  'pool', [3, 3], ...
  'stride', 2, ...
  'pad', [0, 1, 0, 1]); % emulate caffe

% block 4
nKernelsLayer4 = 32; % 64
net.layers{end + 1} = struct('type', 'conv', ...
  'weights', {{0.05 * randn(4, 4, nKernelsLayer3, nKernelsLayer4, 'single'), zeros(1, nKernelsLayer4, 'single')}}, ...
  'learningRate', lr, ...
  'stride', 1, ...
  'pad', 0);
net.layers{end + 1} = struct('type', 'relu');

% block 5
net.layers{end + 1} = struct('type', 'conv', ...
  'weights', {{0.05 * randn(1, 1, nKernelsLayer4, opts.nclass, 'single'), zeros(1, opts.nclass, 'single')}}, ...
  'learningRate', 0.1 * lr, ...
  'stride', 1, ...
  'pad', 0);

% loss layer
net.layers{end + 1} = struct('type', 'softmaxloss');

% meta parameters
net.meta.inputSize = opts.InputSize;
net.meta.trainOpts.learningRate = [0.05 * ones(1, 30), 0.005 * ones(1, 10), 0.0005 * ones(1, 5)];
net.meta.trainOpts.weightDecay = 0.0001;
net.meta.trainOpts.batchSize = 100;
net.meta.trainOpts.numEpochs = numel(net.meta.trainOpts.learningRate);

% fill in default values
net = vl_simplenn_tidy(net);

% switch to DagNN if requested
switch lower(opts.networkType)
  case 'simplenn'
    % done
  case 'dagnn'
    net = dagnn.DagNN.fromSimpleNN(net, 'canonicalNames', true);
    net.addLayer('error', dagnn.Loss('loss', 'classerror'), {'prediction', 'label'}, 'error');
  otherwise
    assert(false);
end

end
